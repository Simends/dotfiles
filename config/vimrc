
if has('autocmd')
    filetype plugin indent on
endif

let mapleader = " "
let maplocalleader = "\\"

if has('nvim')
  au TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=40}
  autocmd TermOpen * setlocal nonumber norelativenumber
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif
  au BufEnter * if &buftype == 'nofile' | :set nonu | :set nornu | :set nolist | endif
  set laststatus=3
  " set cmdheight=0
  set signcolumn=yes
  set noshowmode
  nnoremap <silent> , ;
  nnoremap <silent> ; ,
  tnoremap <Esc><Esc> <C-\><C-n>
  tnoremap <C-w> <C-\><C-n><C-w>
  tnoremap <M-h> <C-\><C-n><C-w>h
  tnoremap <M-j> <C-\><C-n><C-w>j
  tnoremap <M-k> <C-\><C-n><C-w>k
  tnoremap <M-l> <C-\><C-n><C-w>l
else

  " Automatically install vim-plug
nnoremap <silent> <leader>w mz:%s/\s\+$//e<cr>`z:delmarks z<cr>       " Remove all trailing whitespace
  let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
  if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  let g:vimtex_view_method = 'zathura'
  let g:vimtex_compiler_method = 'latexrun'
  let g:undotree_WindowLayout = 3
  let g:tagbar_position = 'botright vertical'
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
  let g:fugitive_defer_to_existing_maps = 1
  let g:SuperTabDefaultCompletionType = "context"
  let g:polyglot_disabled = ['markdown']
  let g:textobj_datetime_no_default_key_mappings = 1
  let g:textobj_indent_no_default_key_mappings = 1
  let g:textobj_between_no_default_key_mappings = 1
  " let base16colorspace=256
  " Install plugins
  call plug#begin()
    Plug 'tpope/vim-apathy'
    Plug 'tpope/vim-capslock'         " <C-g>c
    Plug 'tpope/vim-characterize'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-endwise'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-sleuth'
    Plug 'tpope/vim-speeddating'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-vinegar'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/gv.vim', { 'on': 'GV' }
    Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }
    Plug 'junegunn/vim-easy-align'
    Plug 'justinmk/vim-sneak'
    Plug 'nixon/vim-vmath'
    Plug 'glts/vim-radical'           " gA, crd, crx, cro, crb
    Plug 'glts/vim-magnum'
    Plug 'atweiden/vim-betterdigraphs'
    Plug 'ervandew/supertab'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'kana/vim-textobj-user'
    Plug 'kana/vim-textobj-indent'    " (a/i)i
    Plug 'thinca/vim-textobj-between' " (a/i)f<char>
    "Plug 'mattn/vim-textobj-url'      " (a/i)u
    Plug 'preservim/vim-textobj-sentence' " (a/i)s
    Plug 'sheerun/vim-polyglot'
    Plug 'lervag/vimtex'
    Plug 'lervag/lists.vim'
    Plug 'majutsushi/tagbar', { 'on':  'TagbarToggle' }
    Plug 'mbbill/undotree', { 'on':  'UndotreeToggle' }
    " Colors
    Plug 'morhetz/gruvbox'
    Plug 'rakr/vim-one'
    Plug 'junegunn/seoul256.vim'
    Plug 'ghifarit53/tokyonight-vim'
    Plug 'preservim/vim-colors-pencil'
    Plug 'franbach/miramare'
    Plug 'savq/melange'
    Plug 'https://gitlab.com/yorickpeterse/vim-paper.git'
    Plug 'juanedi/predawn.vim'
    Plug 'olivertaylor/vacme'
    Plug 'sainnhe/everforest'
    Plug 'kadekillary/skull-vim'
  call plug#end()
  if has('syntax') && !exists('g:syntax_on')
    syntax enable
  endif
  set nocp
  set laststatus=2
  set showmode
  set foldmethod=indent
  set nrformats=alpha,hex
  set statusline=▊\ \ %y\ %f%h%q%m%r\ %=%=%l/%L:%c\ %p%%\ %{FugitiveStatusline()}\ %{&fileencoding?&fileencoding:&encoding}[%{&fileformat}]\ \ ▊
  highlight ColorColumn ctermbg=magenta
  call matchadd('ColorColumn', '\%81v', 100)
  nnoremap <silent> , ;
  nnoremap <silent> ; ,
  inoremap <silent> ( ()<Left>
  inoremap <silent> [ []<Left>
  inoremap <silent> { {}<Left>
  nnoremap <silent> <F8> :TagbarToggle<CR>
  nnoremap <silent> <F9> :UndotreeToggle<CR>
  vmap <expr>  ++  VMATH_YankAndAnalyse()
  nmap         ++  vip++)
  map , <plug>Sneak_;
  map ; <plug>Sneak_,
  xmap gl <Plug>(EasyAlign)
  nmap gl <Plug>(EasyAlign)
  nnoremap <silent> <leader>gg :Git<cr>
  nnoremap <silent> <leader>gc :Git commit<cr>
  nnoremap <silent> <leader>gv :GV<cr>
  nnoremap <silent> <leader>tz :Goyo<cr>
  nnoremap <silent> æ :Files<cr>
  nnoremap <silent> ø :Rg<cr>
  nnoremap <silent> <leader>hh :Helptags<cr>
  nnoremap <silent> <leader>hc :Colors<cr>
  nnoremap <silent> <leader>ff :Files<cr>
  nnoremap <silent> <leader>fg :Rg<cr>
  nnoremap <silent> <leader>fb :Buffers<cr>
  nnoremap <silent> <leader>fm :Marks<cr>
  " Set colors
  if &term =~ '256color'
    " Enable true (24-bit) colors instead of (8-bit) 256 colors.
    " :h true-color
    if has('termguicolors')
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
    endif
    colorscheme gruvbox
  endif
  " set guioptions-=m
  " set guioptions-=T
  " set guioptions-=r
end " if nvim or vim


" Settings

set number
set relativenumber

set ignorecase
set smartcase
set hlsearch
set incsearch

set confirm
set novisualbell
set noerrorbells

set history=1000
set undofile
set hidden
set nobackup
set nowritebackup
set swapfile
set autoread

set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set expandtab
set smartindent
set backspace=indent,eol,start

set foldnestmax=10
set foldlevelstart=99

set wildmode=full
if has('wildmenu')
  set wildmenu
endif
if has('wildignore')
  set wildoptions=pum
  set wildignore+=*/.git/*,*/node_modules/*,*/.hg/*,*/.svn/*.,*/.DS_Store
endif

" set colorcolumn=80
set complete-=i
set completeopt=menu,preview,longest
set showtabline=1
set linebreak
set nowrap
set noruler
set sidescrolloff=7
set scrolloff=10
set updatetime=50
set fileencoding=UTF-8
set background=dark
set cursorline
set mouse=a
set path=**
set conceallevel=2
set shell=/bin/sh
set lazyredraw
set ttyfast
set modeline
set shortmess+=mrxcI
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list

" hi Normal guibg=NONE ctermbg=NONE
" hi NormalFloat guibg=NONE ctermbg=NONE
" hi NormalNC guibg=NONE ctermbg=NONE
" hi EndOfBuffer guibg=NONE ctermbg=NONE


" Commands

com! -nargs=+ Grep vimgrep <args> **/*                        " Use vimgrep in folder
com! -nargs=1 Ctags !ctags -R --language-force=<args>         " Generate tags file for specific lang and for all files in folder
com! -nargs=1 Temp read $XDG_CONFIG_HOME/templates/<args>     " Insert template
com! ToggleLightMode let &background = ( &background == "dark"? "light" : "dark" )

au SwapExists * let v:swapchoice = 'o'
" autocmd InsertLeave * write

function! SetTextPrefs()
  com! -nargs=1 KeyWordPrgDict !dict <args> | less
  setlocal keywordprg=:KeyWordPrgDict
  setlocal errorformat=%f:%l:%c:%m
  setlocal makeprg=proselint\ %
  setlocal spell
  setlocal colorcolumn=0
  setlocal wrap
  setlocal textwidth=80 formatoptions+=t
  setlocal infercase
  setlocal nocursorline
  noremap <buffer> j gj
  noremap <buffer> k gk
  noremap <buffer> gj j
  noremap <buffer> gk k
  exec "set listchars=tab:\uBB\uBB,multispace:\uB7,trail:\uB7,nbsp:~"
  if filereadable(expand("$XDG_CONFIG_HOME/templates/abbrevations"))
    source $XDG_CONFIG_HOME/templates/abbrevations
  endif

  " Auto-capitalize script
  augroup SENTENCES
    au!
    autocmd InsertCharPre * if search('\v(%^|[.!?#*]\_s+|\_^\-\s|\_^title\:\s|\n\n)%#', 'bcnw') != 0 | let v:char = toupper(v:char) | endif
  augroup END
endfunction
au Filetype text,mail,markdown call SetTextPrefs()
com! TextMode call SetTextPrefs()

au Filetype markdown inoremap [<Tab> [](<++>)<++><esc>F[a
au Filetype markdown nnoremap <leader>nt <cmd>vimgrep /^##* / %<cr>

au FileType sh setlocal makeprg=shellcheck\ -f\ gcc\ %

com! -nargs=1 KeyWordPrgLua !qutebrowser https://www.lua.org/manual/5.4/manual.html\#pdf-<args>
au FileType lua setlocal keywordprg=:KeyWordPrgLua

au Filetype python setlocal keywordprg=pydoc

au Filetype qf nnoremap <silent><cr> :.cc<cr>
au FileType gitcommit,gitrebase,gitconfig set bufhidden=delete


" Mappings

nnoremap <F1> K
nmap <silent> Y y$
nmap <silent> { {zz
nmap <silent> } }zz
nmap <silent> Q :echo ''<cr>
nmap <silent> gs z=
inoremap <silent> , ,<c-g>u
inoremap <silent> . .<c-g>u
inoremap <silent> ? ?<c-g>u
inoremap <silent> ! !<c-g>u
nmap <silent> ZA :wqa<cr>
nmap <silent> ZW :wa<cr>
nmap <silent> gb :e #<cr>
nnoremap <silent> gd <C-]>zt
nnoremap <silent> J mzJ`z:delmarks z<cr>
vnoremap <silent> J :m '>+1<cr>gv=gv
vnoremap <silent> K :m '<-2<cr>gv=gv
nnoremap <silent> <c-m> :mode<cr>
nnoremap <silent> <c-l> :nohl<cr><c-l>
nnoremap <silent> <leader>hv :e ~/.vimrc<cr>
nnoremap <silent> <Tab><Tab> <C-w>w
nnoremap <silent> <Tab>v <C-w>v
nnoremap <silent> <Tab>s <C-w>s
nnoremap <silent> <Tab>l <C-w>l
nnoremap <silent> <Tab>k <C-w>k
nnoremap <silent> <Tab>j <C-w>j
nnoremap <silent> <Tab>h <C-w>h
nnoremap <silent> <leader><leader> /<++><cr>4cl

nnoremap <silent> <leader>r :e<cr>
nnoremap <silent> <leader>R :so ~/.vimrc<cr>
nnoremap <silent> <leader>tn :set nu!<cr>:set rnu!<cr>
nnoremap <silent> <leader>tt <cmd>vimgrep /\C[TODO\|NOTE\|HACK\|FIXME\|BUG\|FIX\|ISSUE\|WARN\|PERF]: /jg **/*<cr>
nnoremap <silent> <leader>tf :20Lexplore<cr>
nnoremap <silent> <leader>tl :ToggleLightMode<cr>
nnoremap <silent> <leader>mm :make<cr>
nnoremap <silent> <leader>md :make debug<cr>
nnoremap <silent> <leader>mf :make format<cr>
nnoremap <silent> <leader>ml :make lint<cr>
nnoremap <silent> <leader>nsn :setlocal spelllang=nb
nnoremap <silent> <leader>nsN :setlocal spelllang=nn
nnoremap <silent> <leader>nse :setlocal spelllang=en

nnoremap <silent> QQ :copen<cr>
nnoremap <silent> QL :cn<cr>
nnoremap <silent> QH :cp<cr>
inoremap <c-s> <esc>:w<cr>a
imap <c-l> <esc><c-l>a
imap <c-w> <esc><c-w>
