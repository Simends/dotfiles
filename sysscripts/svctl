#!/bin/sh

if [[ ${USER} == "root" ]]; then
	servicedirs="/run/s6-rc/servicedirs"
	sourcedirs="/etc/s6/adminsv"
 	compileddir="/etc/s6/rc"
	livedir="/run/s6-rc"
    logdir="/var/log"
else
	servicedirs="/run/user/${UID}/s6-rc/servicedirs"
	sourcedirs="${XDG_CONFIG_HOME}/s6/sv"
    compileddir="${XDG_DATA_HOME}/s6/rc"
	livedir="/run/user/${UID}/s6-rc"
	envdir="$XDG_CONFIG_HOME/s6/env"
    logdir="$XDG_CACHE_HOME/s6/log"
fi

okprint="\033[1m[ \033[92mOK\033[0m \033[1m]\033[0m"

s6listwithstat() {
	list=""
	for service in "$@"; do
        svtype=$(s6-rc-db -l "$livedir" type "$service")
        case "${svtype}" in
            "bundle")
                stat="\033[1mBundle\033[0m"
                ;;
            "longrun")
                stat=$(s6-svstat "$servicedirs/$service" | sed 's/up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/down/\\033[1m\\033[31mDown\\033[0m/g')
                ;;
            *)
                stat=$(s6-rc -l "$livedir" -a list | grep -c "$service$" | sed 's/1$/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/0$/\\033[1m\\033[31mDown\\033[0m/g')
                ;;
        esac
        list="$list\n\033[1m$service\033[0m|$stat"
	done
	echo -e "$list" | column -t -s '|'
}

s6stat() {
    # NAME
    echo ""
    nme="Name:|\033[1m$1\033[0m"

    # DESCRIPTION
    if [ -f "$sourcedirs/$1/description" ] || [ -f "$sourcedirs/$1-srv/description" ]
    then
        svdesc=$(cat "$sourcedirs/$1/description" 2>/dev/null || cat "$sourcedirs/$1-srv/description" 2>/dev/null)
        dsc="Desc:|$svdesc"
    fi

    # DOCUMENTATION
    if [ -f "$sourcedirs/$1/documentation" ] || [ -f "$sourcedirs/$1-srv/documentation" ]
    then
        svdocs=$(cat "$sourcedirs/$1/documentation" 2>/dev/null || cat "$sourcedirs/$1-srv/documentation" 2>/dev/null)
        doc="Docs:|$svdocs"
    fi

    # TYPE
    svtype=$(s6-rc-db -l "$livedir" type "$1")
    srvtype=$(s6-rc-db -l "$livedir" type "$1-srv" 2>/dev/null)
    if [ "$srvtype" ]
    then
        svtype="$srvtype"
    fi
    tpe="Type:|$svtype"

    # STATUS
    svstatus=$(s6-svstat "$servicedirs/$1" 2>/dev/null || s6-svstat "$servicedirs/$1-srv" 2>/dev/null)
    if [ "$svstatus" ]; then
	    sts="State:|$(echo "$svstatus" | sed 's/up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/down/\\033[1m\\033[31mDown\\033[0m/g')"
    fi

    # SCRIPT
    case "$svtype" in
        "oneshot")
            echo -e "$nme\n$tpe\n$dsc\n$doc\n$sts" | column -t -s "|" -o " "
            echo -e "\nScript:\n-------"
            s6-rc-db -l "$livedir" script "$1"
            echo ""
            ;;
        "longrun")
            pspid=$(s6-svstat -p "$servicedirs/$1" 2>/dev/null || s6-svstat -p "$servicedirs/$1-srv" 2>/dev/null)
            if [ "$pspid" != -1 ]; then
                cpu="Cpu:|$(ps --no-headers -o pcpu p $pspid | sed 's/^[[:space:]]*//')%"
                mem="Mem:|$(ps --no-headers -o pmem p $pspid | sed 's/^[[:space:]]*//')%"
                vem="Virtmem:|$(ps --no-headers -o vsz p $pspid | sed 's/^[[:space:]]*//')"
                pem="Physmem:|$(ps --no-headers -o rss p $pspid | sed 's/^[[:space:]]*//')"
                thr="Threads:|$(ps --no-headers -o thcount p $pspid | sed 's/^[[:space:]]*//')"
                echo -e "$nme\n$tpe\n$dsc\n$doc\n$sts\n$cpu\n$mem\n$vem\n$pem\n$thr" | column -t -s "|" -o "  "

                echo -e "\nProcess:\n--------"
                pstree -acpnuS $(s6-svstat -p "$servicedirs/$1" 2>/dev/null || s6-svstat -p "$servicedirs/$1-srv" 2>/dev/null)
            fi
            ;;
        *)
            echo -e "$nme\n$tpe\n$dsc\n$doc\n$sts" | column -t -s "|" -o " "
            ;;
    esac

    # DEPENDENCIES
    echo ""
    if [ "${svtype}" == 'bundle' ]; then
        echo "Contents:"
        echo "---------"
        s6listwithstat $(s6-rc-db -l "$livedir" contents "$1")
        echo ""
    else
        echo "Dependencies:"
        echo "-------------"
        s6-rc-db -l "$livedir" dependencies "$1" || echo "None"
        echo ""
        if [ -f "${logdir}/$1"/current ]; then
	        echo -e "Log:\n----"
	        tail "${logdir}/$1"/current
	        echo ""
        fi
    fi
}

s6listfailed() {
    list=""
    echo -e "\033[1;91m"
    for service in "$servicedirs"/*/; do
        list="$list\n$service $(s6-svstat -o up,wantedup "$service")"
    done
    echo -e "$list" | grep "false true" | cut -d " " -f 1 | sed "s|/| |g" | cut -d " " -f 5
    echo -e "\033[0m"
}

s6listlongruns() {
	echo ""
	list=""
	for service in "$@"; do
		list="$list\n\033[1m$service\033[0m|$(s6-svstat "$servicedirs/$service")"
	done
	list=$(echo -e "$list" | sed 's/up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/down/\\033[1m\\033[31mDown\\033[0m/g')
	echo -e "$list" | column -t -s '|'
	echo ""
}

s6list() {
    case "$2" in
        "all" | "services" | "oneshots" | "bundles" | "longruns")
            echo ""
            s6listwithstat $(s6-rc-db -l "$livedir" list "$2")
            echo ""
            ;;
        "up")
	        echo -e "\033[1m"
            s6-rc -l "$livedir" -a list
	        echo -e "\033[0m"
            ;;
        "down")
	        echo -e "\033[1m"
            s6-rc -l "$livedir" -da list
	        echo -e "\033[0m"
            ;;
        "in")
            echo ""
            s6listwithstat $(s6-rc-db -l "$livedir" contents "$3")
            echo ""
            ;;
        "failed")
            s6listfailed
            ;;
        *)
            echo "
Usage:

list all
    Lists everything - atomic services and bundles

list services
    Lists all atomic services

list oneshots
    Lists oneshots

list longruns
    Lists longruns

list bundles
    Lists all bundles

list up
    List currently active services

list down
    List currently inactive services

list failed
    List services which should be up, but that are down

list in BUNDLE
    List all services in a bundle
"
            ;;
    esac
}

s6doc() {
    echo -e "\n\033[1mChecking consistency between s6 and s6-rc...\033[0m"
    s6-rc -l "$livedir" diff && echo -e "$okprint"

    echo -e "\n\033[1mChecking the compiled database...\033[0m"
    s6-rc-db -l "$livedir" check && echo -e "$okprint"
    echo ""
}

s6compile() {
	stamp=$(date +"%d-%m-%Y-%H:%M:%N")
	newdir="$compileddir/compiled@$stamp"

    	echo -e "\n\033[1mCompiling new database...\033[0m"
    	s6-rc-compile "$newdir" "$sourcedirs" && echo -e "$okprint"

    	echo  -e "\n\033[1mSwitching to new database...\033[0m"
    	s6-rc-update -l "$livedir" "$newdir" && echo -e "$okprint"

    	echo -e "\n\033[1mCreating symlink for new database...\033[0m"
	ln -sfn "$newdir" "$compileddir/current" && echo -e "$okprint"
    	echo ""

    	# /usr/share/libalpm/scripts/s6-rc-db-update-hook
}

s6editbundle() {
	case "$3" in
		"add" | "a" | "enable")
		touch "$sourcedirs/$2/contents.d/$4" && echo -e "Service \033[1m$4\033[0m is now added to \033[1m$2\033[0m"
		;;
		"remove" | "rm" | "r" | "disable")
		rm "$sourcedirs/$2/contents.d/$4" && echo -e "Service \033[1m$4\033[0m is now removed from \033[1m$2\033[0m"
		;;
	esac
}

s6importenv() {
    seldir="$2"
    if [ -z "$seldir" ]; then
	    seldir="$envdir"
    fi
    echo "$(printenv "$1")" > "$seldir/$1"
}

s6setenv() {
    seldir="$3"
    if [ -z "$seldir" ]; then
	    seldir="$envdir"
    fi
    echo "$2" > "$seldir/$1"
}

s6sendsig() {
    case "$1" in
        "SIGALRM")
            sigflg="-a"
            ;;
        "SIGABRT")
            sigflg="-b"
            ;;
        "SIGQUIT")
            sigflg="-q"
            ;;
        "SIGHUP")
            sigflg="-h"
            ;;
        "SIGKILL")
            sigflg="-k"
            ;;
        "SIGTERM")
            sigflg="-t"
            ;;
        "SIGINT")
            sigflg="-i"
            ;;
        "SIGUSR1")
            sigflg="-1"
            ;;
        "SIGUSR2")
            sigflg="-2"
            ;;
        "SIGSTOP")
            sigflg="-p"
            ;;
        "SIGCONT")
            sigflg="-c"
            ;;
        "SIGWINCH")
            sigflg="-y"
            ;;
        *)
            echo "Invalid signal"
            exit 1
            ;;
    esac
    s6-svc "$sigflg" "$servicedirs/$2"
}

case "$1" in
    "stat" | "i")
        s6stat "$2"
        ;;
    "up" | "u")
        s6-rc -l "$livedir" -u change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[32mup\033[0m"
        ;;
    "down" | "d")
        s6-rc -l "$livedir" -d change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[31mdown\033[0m"
        ;;
    "restart" | "r")
        s6-rc -l "$livedir" -d change "$2" && s6-rc -l "$livedir" -u change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[32mup\033[0m"
        ;;
    "reload")
    	srvtype=$(s6-rc-db type "$1-srv" 2>/dev/null)
    	if [ "$srvtype" ]; then
		    s6-svc -h "$servicedirs/$2-srv" && echo -e "Service \033[1m$2\033[0m is now \033[1mreloaded\033[0m"
	    else
		    s6-svc -h "$servicedirs/$2" && echo -e "Service \033[1m$2\033[0m is now \033[1mreloaded\033[0m"
    	fi
	;;
    "signal")
        s6sendsig "$2" "$3"
        ;;
    "in")
	    s6editbundle "$@"
	    ;;
    "log")
        less "$logdir/$2/current"
        ;;
    "logrotate")
	    s6-svc -a "$servicedirs/$2-log" && echo -e "The logger for \033[1m$2\033[0m has rotated it's logs"
	    ;;
    "list" | "l")
        s6list "$@"
        ;;
    "update")
        s6compile
        ;;
    "doctor")
        s6doc
        ;;
    "import-env")
	    s6importenv "$2" "$3"
	    ;;
    "set-env")
	    s6setenv "$2" "$3" "$4"
	    ;;
    *)
        echo "
Usage:

stat SERVICE
    Print status about SERVICE

up SERVICE
    Bring SERVICE up

down SERVICE
    Bring SERVICE down

restart SERVICE
    Restart SERVICE

reload SERVICE
    Make SERVICE reload it's configuration

signal SIGNAL SERVICE
    Send SIGNAL to SERVICE

in BUNDLE [ add | remove ] SERVICE
    Add or remove a SERVICE from a BUNDLE

log SERVICE
    Show the logs of SERVICE

logrotate SERVICE
    Force rotation of logs for SERVICE

list [ all | services | longruns | oneshots | up | down | failed | in BUNDLE ]
    List various information

update
    Compile a new database and switch to it immidiately

doctor
    Run various checks on the s6-rc database

import-env VARIABLE [ ENVDIR ]
    Import variable from current environment

set-env VARIABLE VALUE [ ENVDIR ]
    Set environment variable to specific value

"
        ;;
esac
