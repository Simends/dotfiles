#!/bin/sh
# shellcheck disable=3037

if [ "$USER" = "root" ]; then
  servicedirs="/run/s6-rc/servicedirs"
  sourcedirs="/etc/s6-rc/sv"
  compileddir="/etc/s6-rc/db"
  livedir="/run/s6-rc"
  logdir="/var/log"
else
  servicedirs="/run/user/$UID/s6-rc/servicedirs"
  sourcedirs="$XDG_CONFIG_HOME/s6/sv"
  compileddir="$XDG_DATA_HOME/s6/rc"
  livedir="/run/user/$UID/s6-rc"
  envdir="$XDG_CONFIG_HOME/s6/env"
  logdir="$XDG_CACHE_HOME/s6/log"
fi

okprint="\033[1m[ \033[92mOK\033[0m \033[1m]\033[0m"

s6gettype() {
  s6-rc-db -l "$livedir" type "$1"
}

s6getstatus() {
  sv="$1"
  svtype=$(s6gettype "$sv" )
  case "${svtype}" in
    "bundle")
      dry_change=$(s6-rc -l "$livedir" -un0 -v1 change "$sv" | wc -l)
      bundle_len=$(s6-rc-db -l "$livedir" contents "$sv" | wc -l)
      if [ "$dry_change" = "0" ]
      then
        echo "Up"
      elif [ "$dry_change" = "$bundle_len" ]
      then
        echo "Down"
      else
        echo "Partial"
      fi
      ;;
    "longrun")
      stat=$(s6-svstat -o up,wantedup "$servicedirs/$sv")
      case "${stat}" in
        "true true")
          echo "Up"
          ;;
        "true false")
          echo "Up, want down"
          ;;
        "false true")
          echo "Down, want up"
          ;;
        "false false")
          echo "Down"
          ;;
        *)
          echo "ERROR"
          ;;
      esac
      ;;
    "oneshot")
      stat=$(s6-rc -l "$livedir" -a list | grep -c "$sv$" | sed 's/1$/Up/g' | sed 's/0$/Down/g')
      echo "$stat"
      ;;
  esac
}

s6isinpipeline() {
  s6-rc-db -l "$livedir" pipeline "$1" 2>/dev/null && echo "true" || echo "false"
}

s6listwithstat() {
  list=""
  for service in "$@"; do
    stat=$(s6getstatus "$service" | sed 's/Up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/Down/\\033[1m\\033[31mDown\\033[0m/g' | sed 's/Partial/\\033[1m\\033[33mPartial\\033[0m/g')
    list="$list\n\033[1m$service\033[0m|$stat"
  done
  echo -e "$list" | column -t -s '|'
}

s6printinfo() {
  svname="$1"
  fname="Name:|\033[1m$svname\033[0m"
  svtype=$(s6gettype "$svname")
  ftype="Type:|$svtype"
  if [ -f "$sourcedirs/$svname/description" ]
  then
    svdesc=$(cat "$sourcedirs/$1/description")
    fdesc="\nDesc:|$svdesc"
  else
    fdesc=""
  fi
  if [ -f "$sourcedirs/$svname/documentation" ]
  then
    svdocs=$(cat "$sourcedirs/$1/documentation")
    fdocs="\nDocs:|$svdocs"
  else
    fdocs=""
  fi

  echo ""
  case "$svtype" in
    "longrun")
      svpid=$(s6-svstat -p "$servicedirs/$svname" 2>/dev/null)
      svstatus=$(s6-svstat "$servicedirs/$svname" 2>/dev/null)
      fstatus="State:|$(echo "$svstatus" | sed 's/up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/down/\\033[1m\\033[31mDown\\033[0m/g')"
      if [ "$svpid" != -1 ]
      then
        svcpu=$(ps --no-headers -o pcpu p "$svpid" | sed 's/^[[:space:]]*//')
        svmem=$(ps --no-headers -o pmem p "$svpid" | sed 's/^[[:space:]]*//')
        svvem=$(ps --no-headers -o vsz p "$svpid" | sed 's/^[[:space:]]*//')
        svpem=$(ps --no-headers -o rss p "$svpid" | sed 's/^[[:space:]]*//')
        svthr=$(ps --no-headers -o thcount p "$svpid" | sed 's/^[[:space:]]*//')
        svpstree=$(pstree -acpnuS "$svpid")
        fps="Usage:|Cpu: $svcpu% Mem: $svmem% Virtmem: $svvem Physmem: $svpem Threads: $svthr"
        echo -e "$fname\n$ftype$fdesc$fdocs\n$fstatus\n$fps" | column -t -s "|" -o " "
        echo -e "\nProcess:\n--------\n$svpstree"
      else
        echo -e "$fname\n$ftype$fdesc$fdocs\n$fstatus" | column -t -s "|" -o " "
      fi
      echo -e "\nDependencies:"
      echo "-------------"
      s6-rc-db -l "$livedir" dependencies "$1" || echo "None"
      echo ""
      if [ -f "${logdir}/$1"/current ]
      then
        echo -e "Log:\n----"
        tail "${logdir}/$1"/current
        echo ""
      fi
      ;;
    "oneshot")
      svstatus=$(s6getstatus "$svname")
      fstatus="Status:|$(echo "$svstatus" | sed 's/Up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/Down/\\033[1m\\033[31mDown\\033[0m/g')"
      echo -e "$fname\n$ftype$fdesc$fdocs\n$fstatus" | column -t -s "|" -o " "
      echo -e "\nDependencies:"
      echo "-------------"
      s6-rc-db -l "$livedir" dependencies "$1" || echo "None"
      echo ""
      if [ -f "${logdir}/$1"/current ]
      then
        echo -e "\nLog:\n----"
        tail "${logdir}/$1"/current
        echo ""
      fi
      ;;
    "bundle")
      svstatus=$(s6getstatus "$svname")
      fstatus="Status:|$(echo "$svstatus" | sed 's/Up/\\033[1m\\033[32mUp\\033[0m/g' | sed 's/Down/\\033[1m\\033[31mDown\\033[0m/g' | sed 's/Partial/\\033[1m\\033[33mPartial\\033[0m/g')"
      echo -e "$fname\n$ftype$fdesc$fdocs\n$fstatus\n" | column -t -s "|" -o " "
      echo -e "\nContents:\n---------"
      s6listwithstat $(find "$sourcedirs/$svname/contents.d" -type f -printf '%f\n')
      echo ""
      ;;
  esac
}

s6listfailed() {
  list=""
  for service in "$servicedirs"/*/; do
    list="$list\n$service $(s6-svstat -o up,wantedup "$service")"
  done
  echo -e "$list" | grep "false true" | cut -d " " -f 1 | sed "s|/| |g" | cut -d " " -f 5
}

s6list() {
  case "$2" in
    "all" | "services" | "oneshots" | "longruns")
      s6-rc-db -l "$livedir" list "$2"
      ;;
    "bundles")
      s6-rc-db -l "$livedir" list "$2" | sed '/.*-pipeline$/d'
      ;;
    "up")
      s6-rc -l "$livedir" -a list
      ;;
    "down")
      s6-rc -l "$livedir" -da list
      ;;
    "in")
      s6-rc-db -l "$livedir" contents "$3"
      ;;
    "failed")
      s6listfailed
      ;;
    *)
      echo "usage: sv list all|services|oneshots|longruns|bundles|up|down|failed|in [ bundle ]"
      ;;
  esac
}

s6doc() {
  echo -e "\n\033[1mChecking consistency between s6 and s6-rc...\033[0m"
  s6-rc -l "$livedir" diff && echo -e "$okprint"

  echo -e "\n\033[1mChecking the compiled database...\033[0m"
  s6-rc-db -l "$livedir" check && echo -e "$okprint"
  echo ""
}

s6compile() {
  stamp=$(date +"%d-%m-%Y-%H:%M:%N")
  newdir="$compileddir/compiled@$stamp"

  echo -e "\n\033[1mCompiling new database...\033[0m"
  s6-rc-compile "$newdir" "$sourcedirs" && echo -e "$okprint" || exit

  echo -e "\n\033[1mChecking the compiled database...\033[0m"
  s6-rc-db -l "$livedir" -c "$newdir" check && echo -e "$okprint" || exit

  echo  -e "\n\033[1mSwitching to new database...\033[0m"
  s6-rc-update -l "$livedir" "$newdir" && echo -e "$okprint" || exit

  echo -e "\n\033[1mCreating symlink for new database...\033[0m"
  ln -sfn "$newdir" "$compileddir/current" && echo -e "$okprint" || exit
  echo ""
}

s6editbundle() {
  case "$3" in
    "add")
      touch "$sourcedirs/$2/contents.d/$4" && echo -e "Service \033[1m$4\033[0m is now added to \033[1m$2\033[0m"
      ;;
    "remove" | "rm")
      rm "$sourcedirs/$2/contents.d/$4" && echo -e "Service \033[1m$4\033[0m is now removed from \033[1m$2\033[0m"
      ;;
    *)
      echo "usage: sv in [ bundle ] add|remove"
      ;;
  esac
}

s6importenv() {
  seldir="$2"
  if [ -z "$seldir" ]; then
    seldir="$envdir"
  fi
  printenv "$1" > "$seldir/$1"
}

s6setenv() {
  seldir="$3"
  if [ -z "$seldir" ]; then
    seldir="$envdir"
  fi
  echo "$2" > "$seldir/$1"
}

s6iter() {
  case "$1" in
    "set")
      dbdir="$compileddir/compiled@$2"
      echo  -e "\n\033[1mSwitching to new database...\033[0m"
      s6-rc-update -l "$livedir" "$dbdir" && echo -e "$okprint"

      echo -e "\n\033[1mCreating symlink for new database...\033[0m"
      ln -sfn "$dbdir" "$compileddir/current" && echo -e "$okprint"
      echo ""
      ;;
    "list")
      ls "$compileddir" | grep 'compiled@.*' | sed 's/compiled@//'
      ;;
    *)
      echo "usage: sv database list|set [ database ]"
      ;;
  esac
}

s6conf() {
  sv="$1"
  if [ -f "$sourcedirs/$sv/env/conf" ]
  then
    $EDITOR "$sourcedirs/$sv/env/conf"
  else
    echo "No configuration file exists for $sv"
  fi
}


case "$1" in
  "stat" | "i")
    s6printinfo "$2"
    ;;
  "up" | "u")
    s6-rc -l "$livedir" -u change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[32mup\033[0m"
    ;;
  "down" | "d")
    s6-rc -l "$livedir" -d change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[31mdown\033[0m"
    ;;
  "restart" | "r")
    s6-rc -l "$livedir" -d change "$2" && s6-rc -l "$livedir" -u change "$2" && echo -e "Service \033[1m$2\033[0m is now \033[32mup\033[0m"
    ;;
  "reload")
    srvtype=$(s6-rc-db type "$1-srv" 2>/dev/null)
    if [ "$srvtype" ]
    then
      s6-svc -h "$servicedirs/$2-srv" && echo -e "Service \033[1m$2\033[0m is now \033[1mreloaded\033[0m"
    else
      s6-svc -h "$servicedirs/$2" && echo -e "Service \033[1m$2\033[0m is now \033[1mreloaded\033[0m"
    fi
    ;;
  "in")
    s6editbundle "$@"
    ;;
  "log")
    less "$logdir/$2/current"
    ;;
  "logrotate")
    s6-svc -a "$servicedirs/$2-log" && echo -e "The logger for \033[1m$2\033[0m has rotated it's logs"
    ;;
  "list" | "l")
    s6list "$@"
    ;;
  "update")
    s6compile
    ;;
  "doctor")
    s6doc
    ;;
  "import-env")
    s6importenv "$2" "$3"
    ;;
  "set-env")
    s6setenv "$2" "$3" "$4"
    ;;
  "database" | "db")
    s6iter "$2" "$3"
    ;;
  "conf")
    s6conf "$2"
    ;;
  *)
    echo "usage: sv stat|up|down|restart|reload|in|log|logrotate|list|update|doctor|import-env|set-env|database|conf"
    ;;
esac
